#BlueJ class context
comment0.params=
comment0.target=Filial()
comment0.text=\n\ Construtor\ vazio.\n
comment1.params=f
comment1.target=Filial(Filial)
comment1.text=\n\ Construtor\ por\ c\u00F3pia.\n\ @param\ f\n
comment10.params=v
comment10.target=void\ insereVenda(Venda)
comment10.text=\ \n\ Insere\ uma\ determinada\ venda.\n\ @param\ v\n
comment11.params=
comment11.target=void\ limpar()
comment11.text=\ \n\ Apaga\ a\ estrutura\ da\ Filial.\n
comment12.params=
comment12.target=java.util.List\ getFilialClientes()
comment12.text=\ \n\ Retorna\ a\ estrutura\ da\ Filial.\n\ @return\n
comment13.params=lista
comment13.target=void\ total(java.util.Set)
comment13.text=\ Guarda\ numa\ estrutura\ todos\ os\ clientes\ que\ fizeram\ compras\ na\ Filial.\n\ @return\ void\n
comment14.params=lista
comment14.target=void\ totalMes(double[])
comment14.text=\ Guarda\ numa\ estrutura\ a\ factora\u00E7\u00E3o\ de\ cada\ m\u00EAs.\n\ @return\ void\n
comment15.params=clie\ mes
comment15.target=void\ getCliMes(java.util.Set,\ int)
comment15.text=\ Guarda\ numa\ estrutura\ os\ clientes\ que\ compraram\ num\ determinado\ m\u00EAs.\n\ @return\ void\n
comment16.params=letra
comment16.target=int\ calculaIndice(char)
comment16.text=\ \n\ Calcula\ o\ \u00EDndice\ correspondente\ a\ uma\ determinada\ letra.\n\ @param\ letra\n\ @return\n
comment17.params=
comment17.target=Filial\ clone()
comment17.text=\n\ Fun\u00E7\u00E3o\ para\ fazer\ clone.\n
comment18.params=obj
comment18.target=boolean\ equals(java.lang.Object)
comment18.text=\n\ Fun\u00E7\u00E3o\ que\ testa\ a\ igualdade.\n
comment2.params=clientes\ mes
comment2.target=int\ getNumVendMes(java.util.Set,\ int)
comment2.text=\ \n\ Calcula\ o\ n\u00FAmero\ de\ vendas\ num\ determinado\ m\u00EAs,\ e\ guarda\ os\ clientes\ que\ as\ fizeram.\n\ @param\ clientes\n\ @param\ mes\n\ @return\n
comment3.params=prods\ mes\ cli
comment3.target=ParIntDouble\ getNumCompTotMes(java.util.Set,\ int,\ java.lang.String)
comment3.text=\ \n\ Calcula\ o\ n\u00FAmero\ de\ compras\ e\ o\ total\ gasto\ por\ um\ determinado\ cliente,\ num\ determinado\ m\u00EAs\n\ e\ guarda\ os\ respectivos\ produtos\ comprados.\n\ @param\ prods\n\ @param\ mes\n\ @param\ clie\n
comment4.params=cli\ prod\ mes
comment4.target=void\ getNumCompTotMesProd(java.util.List,\ java.lang.String,\ int)
comment4.text=\ \n\ Guarda\ numa\ estrutura,\ para\ cada\ m\u00EAs,\ os\ clientes\ que\ compraram\ determinado\ produto.\n\ @param\ cli\n\ @param\ prod\n\ @param\ mes\n
comment5.params=cli\ prods
comment5.target=void\ getProdsMaisComp(java.lang.String,\ java.util.Map)
comment5.text=\ \n\ Guarda\ numa\ estrutura\ os\ produtos\ e\ as\ repectivas\ quantidades\ que\ um\ determinado\ cliente\ comprou.\n\ @param\ cli\n\ @param\ prods\n
comment6.params=prodscli
comment6.target=void\ getProdsMaisVend(java.util.Map)
comment6.text=\ \n\ Guarda\ numa\ estrutura\ os\ produtos\ e\ as\ respectivas\ quantidades\ compradas,\ assim\ como\ os\ clientes\ que\ os\ compraram.\n\ @param\ prodscli\n
comment7.params=
comment7.target=java.util.List\ getCompTot()
comment7.text=\ \n\ Guarda\ num\ estrutura\ cada\ cliente\ com\ a\ respectiva\ factura\u00E7\u00E3o\ total.\n\ @return\n
comment8.params=cliprods
comment8.target=void\ getCliMaisCompDif(java.util.Map)
comment8.text=\ \n\ Guarda\ numa\ estrutura\ cada\ cliente\ com\ os\ respectivos\ produtos\ comprados.\n\ @param\ cliprods\n
comment9.params=cliquant\ prod
comment9.target=void\ getCliMaisCompProd(java.util.Map,\ java.lang.String)
comment9.text=\ \n\ Guarda\ numa\ estrutura\ cada\ cliente\ com\ a\ respectiva\ quantidade\ e\ factura\u00E7\u00E3o\ de\ um\ determinado\ produto.\n\ @param\ cliquant\n\ @param\ prod\n
numComments=19
