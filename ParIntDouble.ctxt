#BlueJ class context
comment0.params=primeiro\ segundo
comment0.target=ParIntDouble(int,\ double)
comment0.text=\n\ Construtor\ por\ par\u00E2metros.\n\ @param\ primeiro\n\ @param\ segundo\n
comment1.params=p
comment1.target=ParIntDouble(ParIntDouble)
comment1.text=\n\ Construtor\ por\ c\u00F3pia.\n\ @param\ p\n
comment2.params=
comment2.target=int\ getPrimeiro()
comment2.text=\n\ Fun\u00E7\u00E3o\ que\ retorna\ o\ primeiro.\n\ @return\n
comment3.params=
comment3.target=double\ getSegundo()
comment3.text=\n\ Fun\u00E7\u00E3o\ que\ retorna\ o\ segundo.\n\ @return\n
comment4.params=x
comment4.target=void\ addPrimeiro(int)
comment4.text=\n\ Fun\u00E7\u00E3o\ que\ adiciona\ ao\ primeiro.\n\ @param\ x\n
comment5.params=x
comment5.target=void\ addSegundo(double)
comment5.text=\n\ Fun\u00E7\u00E3o\ que\ adiciona\ ao\ segundo.\n\ @param\ x\n
comment6.params=obj
comment6.target=boolean\ equals(java.lang.Object)
comment6.text=\n\ Fun\u00E7\u00E3o\ que\ testa\ a\ igualdade.\n\ @param\ obj\n\ @return\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment7.text=\n\ Fun\u00E7\u00E3o\ para\ imprimir.\n\ @return\n
comment8.params=
comment8.target=ParIntDouble\ clone()
comment8.text=\n\ Fun\u00E7\u00E3o\ que\ faz\ um\ clone.\n\ @return\n
numComments=9
