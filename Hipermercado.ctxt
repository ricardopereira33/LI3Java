#BlueJ class context
comment0.params=
comment0.target=Hipermercado()
comment1.params=
comment1.target=CatClientes\ getCatClientes()
comment10.params=
comment10.target=int\ numeroProdutosDif()
comment10.text=CONSULTAS\ ESTATISTICAS
comment11.params=
comment11.target=double\ facturacaoTotal()
comment12.params=
comment12.target=int\ zeros()
comment13.params=fich
comment13.target=void\ gravaObj(java.lang.String)
comment13.text=\n\ Gravar\ o\ estado\ da\ aplica\u00E7\u00E3o\ num\ determinado\ ficheiro.\n\ @param\ fich\n
comment14.params=fich
comment14.target=Hipermercado\ leObj(java.lang.String)
comment14.text=\n\ Iniciar\ a\ aplica\u00E7\u00E3o\ com\ o\ estado\ guardado\ num\ determinado\ ficheiro.\n\ @param\ fich\n\ @return\n
comment15.params=
comment15.target=java.util.Set\ getProdsNaoComp()
comment15.text=Lista\ ordenada\ alfabeticamente\ com\ os\ c\u00F3digos\ dos\ produtos\ nunca\ comprados\ e\ o\nseu\ respectivo\ total;
comment16.params=mes
comment16.target=ParIntInt\ getNumVendNumCliMes(int)
comment16.text=Dado\ um\ m\u00EAs\ v\u00E1lido,\ determinar\ o\ n\u00FAmero\ total\ global\ de\ vendas\ realizadas\ e\ o\nn\u00FAmero\ total\ de\ clientes\ distintos\ que\ as\ fizeram;
comment17.params=cli
comment17.target=java.util.List\ getNumCompNumProdTot(java.lang.String)
comment17.text=Dado\ um\ c\u00F3digo\ de\ cliente,\ determinar,\ para\ cada\ m\u00EAs,\ quantas\ compras\ fez,\nquantos\ produtos\ distintos\ comprou\ e\ quanto\ gastou\ no\ total.\ ;
comment18.params=prod
comment18.target=java.util.List\ getNumCompNumCliTot(java.lang.String)
comment18.text=public\ List<TriploIntIntDouble>\ getNumCompNumCliTot(String\ prod)\ throws\ ProdutoInexistenteException{\n\ \ \ \ \ \ \ \n\ \ \ \ \ \ \ if(\!catalogoProdutos.existeProduto(prod))\ throw\ new\ ProdutoInexistenteException("O\ produto\ "\ +\ prod\ +\ "\ n\u00E3o\ se\ encontra\ no\ Cat\u00E1logo\!");\n\ \ \ \ \ \ \ \n\ \ \ \ \ \ \ List<TriploIntIntDouble>\ lista\ \=\ new\ ArrayList<>(12);\n\ \ \ \ \ \ \ int\ numCompras\ \=\ 0;\n\ \ \ \ \ \ \ int\ numCli\ \=\ 0;\n\ \ \ \ \ \ \ double\ totFact\ \=\ 0;\n\ \ \ \ \ \ \ for(int\ i\=0;i<12;i++){\n\ \ \ \ \ \ \ \ \ \ \ numCompras\ \=\ 0;\n\ \ \ \ \ \ \ \ \ \ \ numCli\ \=\ 0;\n\ \ \ \ \ \ \ \ \ \ \ totFact\ \=\ 0;\n\ \ \ \ \ \ \ \ \ \ \ Set<String>\ cli\ \=\ new\ TreeSet<String>(new\ ComparatorByString());\n\ \ \ \ \ \ \ \ \ \ \ for(int\ j\=0;j<3;j++){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ParIntDouble\ p\ \=\ filiais[j].getNumCompTotMesProd(cli,i,prod);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ numCompras\ +\=\ p.getPrimeiro();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ totFact\ +\=\ p.getSegundo();\n\ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ numCli\ \=\ cli.size();\n\ \ \ \ \ \ \ \ \ \ \ lista.add(i,new\ TriploIntIntDouble(numCompras,numCli,totFact));\n\ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ return\ lista;\n}
comment19.params=cli
comment19.target=java.util.TreeSet\ getProdsMaisComprados(java.lang.String)
comment19.text=Dado\ o\ c\u00F3digo\ de\ um\ cliente\ determinar\ a\ lista\ de\ c\u00F3digos\ de\ produtos\ que\ mais\n\ comprou\ (e\ quantos),\ ordenada\ por\ ordem\ decrescente\ de\ quantidade\ e,\ para\nquantidades\ iguais,\ por\ ordem\ alfab\u00E9tica\ dos\ c\u00F3digos;
comment2.params=
comment2.target=CatProdutos\ getCatProdutos()
comment20.params=x
comment20.target=java.util.TreeSet\ getProdsMaisVend(int)
comment20.text=Determinar\ o\ conjunto\ dos\ X\ produtos\ mais\ vendidos\ em\ todo\ o\ ano\ (em\ n\u00FAmero\ de\n\ unidades\ vendidas)\ indicando\ o\ n\u00FAmero\ total\ de\ distintos\ clientes\ que\ o\ncompraram\ (X\ \u00E9\ um\ inteiro\ dado\ pelo\ utilizador);
comment21.params=
comment21.target=java.util.List\ getMaioresComp()
comment21.text=Determinar,\ para\ cada\ filial,\ a\ lista\ dos\ tr\u00EAs\ maiores\ compradores\ em\ termos\ de\ndinheiro\ facturado;
comment22.params=x
comment22.target=java.util.TreeSet\ getCliMaisCompDif(int)
comment22.text=Determinar\ os\ c\u00F3digos\ dos\ X\ clientes\ (sendo\ X\ dado\ pelo\ utilizador)\ que\ compraram\n\ mais\ produtos\ diferentes\ (n\u00E3o\ interessa\ a\ quantidade\ nem\ o\ valor),\ indicando\ \n\ quantos,\ sendo\ o\ crit\u00E9rio\ de\ ordena\u00E7\u00E3o\ a\ ordem\ decrescente\ do\ n\u00FAmero\ de\nprodutos;
comment23.params=prod\ x
comment23.target=java.util.TreeSet\ getCliMaisCompProd(java.lang.String,\ int)
comment23.text=Dado\ o\ c\u00F3digo\ de\ um\ produto\ que\ deve\ existir,\ determinar\ o\ conjunto\ dos\ X\ clientes\nque\ mais\ o\ compraram\ e,\ para\ cada\ um,\ qual\ o\ valor\ gasto\ (ordena\u00E7\u00E3o\ cf.\ 5);
comment3.params=
comment3.target=Facturacao\ getFacturacao()
comment4.params=
comment4.target=boolean\ isEmpty()
comment5.params=ficheiro_clientes\ ficheiro_produtos\ ficheiro_vendas
comment5.target=void\ carregaDados(java.lang.String,\ java.lang.String,\ java.lang.String)
comment6.params=produtos
comment6.target=void\ carregarcatalogoProdutos(java.util.ArrayList)
comment7.params=clientes
comment7.target=void\ carregarcatalogoClientes(java.util.ArrayList)
comment8.params=vendas
comment8.target=void\ carregarFacturacao(java.util.ArrayList)
comment9.params=
comment9.target=void\ limpar()
numComments=24
